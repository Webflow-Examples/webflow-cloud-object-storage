---
import Layout from '../layouts/Layout.astro';

// Get the assets prefix from environment
const assetsPrefix = Astro.locals.runtime?.env?.ASSETS_PREFIX || '/app';
---

<Layout title="File Uploader">
	<div class="container mx-auto p-6 max-w-6xl">
		<h1 class="text-4xl font-bold text-center mb-8">File Uploader</h1>
		
		<!-- Upload Section -->
		<div class="card bg-base-100 shadow-xl mb-8">
			<div class="card-body">
				<h2 class="card-title text-2xl mb-4">Upload Files</h2>
				<form id="uploadForm" class="space-y-4">
					<div class="form-control">
						<label class="label">
							<span class="label-text">Select Files</span>
						</label>
						<input 
							type="file" 
							id="fileInput" 
							multiple 
							class="file-input file-input-bordered w-full" 
							accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.zip,.rar"
						/>
					</div>
					
					<div class="form-control">
						<button type="submit" class="btn btn-primary" id="uploadBtn">
							<span class="loading loading-spinner loading-sm hidden" id="uploadSpinner"></span>
							Upload Files
						</button>
					</div>
				</form>
				
				<!-- Upload Progress -->
				<div id="uploadProgress" class="hidden mt-4">
					<div class="progress progress-primary w-full">
						<div class="progress-bar" id="progressBar" style="width: 0%"></div>
					</div>
					<p class="text-sm mt-2" id="progressText">Uploading...</p>
				</div>
			</div>
		</div>

		<!-- Files Section -->
		<div class="card bg-base-100 shadow-xl">
			<div class="card-body">
				<div class="flex justify-between items-center mb-4">
					<h2 class="card-title text-2xl">Uploaded Files</h2>
					<button class="btn btn-outline btn-sm" id="refreshBtn">
						<span class="loading loading-spinner loading-sm hidden" id="refreshSpinner"></span>
						Refresh
					</button>
				</div>
				
				<div id="filesList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
					<!-- Files will be loaded here -->
				</div>
				
				<div id="loadingFiles" class="text-center py-8">
					<span class="loading loading-spinner loading-lg"></span>
					<p class="mt-2">Loading files...</p>
				</div>
				
				<div id="noFiles" class="text-center py-8 hidden">
					<div class="text-6xl mb-4">üìÅ</div>
					<p class="text-lg">No files uploaded yet</p>
					<p class="text-sm text-base-content/70">Upload some files to get started</p>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	const assetsPrefix = '${assetsPrefix}';
	
	// DOM elements
	const uploadForm = document.getElementById('uploadForm') as HTMLFormElement;
	const fileInput = document.getElementById('fileInput') as HTMLInputElement;
	const uploadBtn = document.getElementById('uploadBtn') as HTMLButtonElement;
	const uploadSpinner = document.getElementById('uploadSpinner') as HTMLElement;
	const uploadProgress = document.getElementById('uploadProgress') as HTMLElement;
	const progressBar = document.getElementById('progressBar') as HTMLElement;
	const progressText = document.getElementById('progressText') as HTMLElement;
	const filesList = document.getElementById('filesList') as HTMLElement;
	const loadingFiles = document.getElementById('loadingFiles') as HTMLElement;
	const noFiles = document.getElementById('noFiles') as HTMLElement;
	const refreshBtn = document.getElementById('refreshBtn') as HTMLButtonElement;
	const refreshSpinner = document.getElementById('refreshSpinner') as HTMLElement;

	// File type icons mapping
	const fileIcons: Record<string, string> = {
		'pdf': 'üìÑ',
		'doc': 'üìù',
		'docx': 'üìù',
		'txt': 'üìÑ',
		'zip': 'üì¶',
		'rar': 'üì¶',
		'video': 'üé•',
		'audio': 'üéµ',
		'default': 'üìé'
	};

	// Get file icon based on type
	function getFileIcon(filename: string): string {
		const ext = filename.split('.').pop()?.toLowerCase();
		if (ext && fileIcons[ext]) {
			return fileIcons[ext];
		}
		
		// Check if it's a video or audio file
		if (filename.match(/\.(mp4|avi|mov|wmv|flv|webm|mkv)$/i)) {
			return fileIcons.video;
		}
		if (filename.match(/\.(mp3|wav|flac|aac|ogg|wma)$/i)) {
			return fileIcons.audio;
		}
		
		return fileIcons.default;
	}

	// Format file size
	function formatFileSize(bytes: number): string {
		if (bytes === 0) return '0 Bytes';
		const k = 1024;
		const sizes = ['Bytes', 'KB', 'MB', 'GB'];
		const i = Math.floor(Math.log(bytes) / Math.log(k));
		return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
	}

	// Format date
	function formatDate(dateString: string): string {
		return new Date(dateString).toLocaleDateString('en-US', {
			year: 'numeric',
			month: 'short',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit'
		});
	}

	// Check if file is an image
	function isImage(filename: string): boolean {
		return filename.match(/\.(jpg|jpeg|png|gif|bmp|webp|svg)$/i) !== null;
	}

	// File interface
	interface FileItem {
		name: string;
		link: string;
		dateUploaded: string;
	}

	// Load and display files
	async function loadFiles() {
		try {
			loadingFiles.classList.remove('hidden');
			filesList.innerHTML = '';
			
			const response = await fetch(`${assetsPrefix}/api/assets`);
			if (!response.ok) {
				throw new Error('Failed to load files');
			}
			
			const files = await response.json() as FileItem[];
			
			loadingFiles.classList.add('hidden');
			
			if (files.length === 0) {
				noFiles.classList.remove('hidden');
				return;
			}
			
			noFiles.classList.add('hidden');
			
			files.forEach((file: FileItem) => {
				const fileCard = document.createElement('div');
				fileCard.className = 'card bg-base-200 shadow-sm hover:shadow-md transition-shadow';
				
				const isImageFile = isImage(file.name);
				
				fileCard.innerHTML = `
					<figure class="px-4 pt-4">
						${isImageFile 
							? `<img src="${file.link}" alt="${file.name}" class="rounded-xl h-32 w-full object-cover" />`
							: `<div class="flex items-center justify-center h-32 w-full bg-base-300 rounded-xl">
									<span class="text-4xl">${getFileIcon(file.name)}</span>
							   </div>`
						}
					</figure>
					<div class="card-body p-4">
						<h3 class="card-title text-sm truncate" title="${file.name}">${file.name}</h3>
						<p class="text-xs text-base-content/70">${formatDate(file.dateUploaded)}</p>
						<div class="card-actions justify-end mt-2">
							<a href="${file.link}" target="_blank" class="btn btn-primary btn-xs">
								View
							</a>
						</div>
					</div>
				`;
				
				filesList.appendChild(fileCard);
			});
		} catch (error) {
			console.error('Error loading files:', error);
			loadingFiles.classList.add('hidden');
			filesList.innerHTML = `
				<div class="col-span-full text-center py-8">
					<div class="text-6xl mb-4">‚ùå</div>
					<p class="text-lg text-error">Failed to load files</p>
					<p class="text-sm text-base-content/70">Please try again later</p>
				</div>
			`;
		}
	}

	// Handle file upload
	async function handleUpload(event: Event) {
		event.preventDefault();
		
		const files = fileInput.files;
		if (!files || files.length === 0) {
			alert('Please select files to upload');
			return;
		}
		
		// Show loading state
		uploadBtn.disabled = true;
		uploadSpinner.classList.remove('hidden');
		uploadProgress.classList.remove('hidden');
		
		try {
			for (let i = 0; i < files.length; i++) {
				const file = files[i];
				const formData = new FormData();
				formData.append('file', file);
				
				// Update progress
				const progress = ((i + 1) / files.length) * 100;
				progressBar.style.width = `${progress}%`;
				progressText.textContent = `Uploading ${file.name}...`;
				
				const response = await fetch(`${assetsPrefix}/api/upload`, {
					method: 'POST',
					body: formData
				});
				
				if (!response.ok) {
					throw new Error(`Failed to upload ${file.name}`);
				}
			}
			
			// Success
			progressText.textContent = 'Upload completed!';
			progressBar.style.width = '100%';
			
			// Reset form
			fileInput.value = '';
			
			// Reload files list
			setTimeout(() => {
				loadFiles();
				uploadProgress.classList.add('hidden');
			}, 1000);
			
		} catch (error) {
			console.error('Upload error:', error);
			progressText.textContent = 'Upload failed!';
			alert('Upload failed: ' + (error instanceof Error ? error.message : 'Unknown error'));
		} finally {
			// Reset loading state
			uploadBtn.disabled = false;
			uploadSpinner.classList.add('hidden');
		}
	}

	// Event listeners
	uploadForm.addEventListener('submit', handleUpload);
	refreshBtn.addEventListener('click', () => {
		refreshSpinner.classList.remove('hidden');
		loadFiles().finally(() => {
			refreshSpinner.classList.add('hidden');
		});
	});

	// Load files on page load
	loadFiles();
</script>
